package greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import greendao.Question;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table QUESTION.
*/
public class QuestionDao extends AbstractDao<Question, Long> {

    public static final String TABLENAME = "QUESTION";

    /**
     * Properties of entity Question.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property QuestionHtml = new Property(1, String.class, "questionHtml", false, "QUESTION_HTML");
        public final static Property QuestionText = new Property(2, String.class, "questionText", false, "QUESTION_TEXT");
        public final static Property ExamId = new Property(3, long.class, "examId", false, "EXAM_ID");
    };

    private DaoSession daoSession;

    private Query<Question> exam_QuestionsQuery;

    public QuestionDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'QUESTION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'QUESTION_HTML' TEXT," + // 1: questionHtml
                "'QUESTION_TEXT' TEXT," + // 2: questionText
                "'EXAM_ID' INTEGER NOT NULL );"); // 3: examId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'QUESTION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Question entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String questionHtml = entity.getQuestionHtml();
        if (questionHtml != null) {
            stmt.bindString(2, questionHtml);
        }
 
        String questionText = entity.getQuestionText();
        if (questionText != null) {
            stmt.bindString(3, questionText);
        }
        stmt.bindLong(4, entity.getExamId());
    }

    @Override
    protected void attachEntity(Question entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Question readEntity(Cursor cursor, int offset) {
        Question entity = new Question( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // questionHtml
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // questionText
            cursor.getLong(offset + 3) // examId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Question entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQuestionHtml(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQuestionText(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExamId(cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Question entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Question entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "questions" to-many relationship of Exam. */
    public List<Question> _queryExam_Questions(long examId) {
        synchronized (this) {
            if (exam_QuestionsQuery == null) {
                QueryBuilder<Question> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ExamId.eq(null));
                exam_QuestionsQuery = queryBuilder.build();
            }
        }
        Query<Question> query = exam_QuestionsQuery.forCurrentThread();
        query.setParameter(0, examId);
        return query.list();
    }

}
