package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Progress;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PROGRESS.
*/
public class ProgressDao extends AbstractDao<Progress, Long> {

    public static final String TABLENAME = "PROGRESS";

    /**
     * Properties of entity Progress.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ExamId = new Property(1, Long.class, "examId", false, "EXAM_ID");
        public final static Property ExamDuration = new Property(2, Long.class, "examDuration", false, "EXAM_DURATION");
        public final static Property AnsweredQuestionId = new Property(3, Long.class, "answeredQuestionId", false, "ANSWERED_QUESTION_ID");
        public final static Property TotalRightAnswers = new Property(4, Integer.class, "totalRightAnswers", false, "TOTAL_RIGHT_ANSWERS");
        public final static Property TotalWrongAnswers = new Property(5, Integer.class, "totalWrongAnswers", false, "TOTAL_WRONG_ANSWERS");
        public final static Property StartDate = new Property(6, String.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(7, String.class, "endDate", false, "END_DATE");
    };


    public ProgressDao(DaoConfig config) {
        super(config);
    }
    
    public ProgressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PROGRESS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'EXAM_ID' INTEGER," + // 1: examId
                "'EXAM_DURATION' INTEGER," + // 2: examDuration
                "'ANSWERED_QUESTION_ID' INTEGER UNIQUE ," + // 3: answeredQuestionId
                "'TOTAL_RIGHT_ANSWERS' INTEGER," + // 4: totalRightAnswers
                "'TOTAL_WRONG_ANSWERS' INTEGER," + // 5: totalWrongAnswers
                "'START_DATE' TEXT," + // 6: startDate
                "'END_DATE' TEXT);"); // 7: endDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PROGRESS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Progress entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long examId = entity.getExamId();
        if (examId != null) {
            stmt.bindLong(2, examId);
        }
 
        Long examDuration = entity.getExamDuration();
        if (examDuration != null) {
            stmt.bindLong(3, examDuration);
        }
 
        Long answeredQuestionId = entity.getAnsweredQuestionId();
        if (answeredQuestionId != null) {
            stmt.bindLong(4, answeredQuestionId);
        }
 
        Integer totalRightAnswers = entity.getTotalRightAnswers();
        if (totalRightAnswers != null) {
            stmt.bindLong(5, totalRightAnswers);
        }
 
        Integer totalWrongAnswers = entity.getTotalWrongAnswers();
        if (totalWrongAnswers != null) {
            stmt.bindLong(6, totalWrongAnswers);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(7, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(8, endDate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Progress readEntity(Cursor cursor, int offset) {
        Progress entity = new Progress( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // examId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // examDuration
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // answeredQuestionId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // totalRightAnswers
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // totalWrongAnswers
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // startDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // endDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Progress entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExamId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setExamDuration(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setAnsweredQuestionId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setTotalRightAnswers(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTotalWrongAnswers(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setStartDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEndDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Progress entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Progress entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
