package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Ranking;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RANKING.
*/
public class RankingDao extends AbstractDao<Ranking, Long> {

    public static final String TABLENAME = "RANKING";

    /**
     * Properties of entity Ranking.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Points = new Property(1, Integer.class, "points", false, "POINTS");
        public final static Property CompletedExams = new Property(2, Integer.class, "completedExams", false, "COMPLETED_EXAMS");
        public final static Property RightAnswers = new Property(3, Long.class, "rightAnswers", false, "RIGHT_ANSWERS");
        public final static Property WrongAnswers = new Property(4, Long.class, "wrongAnswers", false, "WRONG_ANSWERS");
    };


    public RankingDao(DaoConfig config) {
        super(config);
    }
    
    public RankingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RANKING' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'POINTS' INTEGER," + // 1: points
                "'COMPLETED_EXAMS' INTEGER," + // 2: completedExams
                "'RIGHT_ANSWERS' INTEGER," + // 3: rightAnswers
                "'WRONG_ANSWERS' INTEGER);"); // 4: wrongAnswers
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RANKING'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Ranking entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer points = entity.getPoints();
        if (points != null) {
            stmt.bindLong(2, points);
        }
 
        Integer completedExams = entity.getCompletedExams();
        if (completedExams != null) {
            stmt.bindLong(3, completedExams);
        }
 
        Long rightAnswers = entity.getRightAnswers();
        if (rightAnswers != null) {
            stmt.bindLong(4, rightAnswers);
        }
 
        Long wrongAnswers = entity.getWrongAnswers();
        if (wrongAnswers != null) {
            stmt.bindLong(5, wrongAnswers);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Ranking readEntity(Cursor cursor, int offset) {
        Ranking entity = new Ranking( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // points
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // completedExams
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // rightAnswers
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // wrongAnswers
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Ranking entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPoints(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCompletedExams(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setRightAnswers(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setWrongAnswers(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Ranking entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Ranking entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
