package greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import greendao.Answer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ANSWER.
*/
public class AnswerDao extends AbstractDao<Answer, Long> {

    public static final String TABLENAME = "ANSWER";

    /**
     * Properties of entity Answer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Answer = new Property(1, String.class, "answer", false, "ANSWER");
        public final static Property Valid = new Property(2, Integer.class, "valid", false, "VALID");
        public final static Property QuestionId = new Property(3, long.class, "questionId", false, "QUESTION_ID");
    };

    private Query<Answer> question_AnswersQuery;

    public AnswerDao(DaoConfig config) {
        super(config);
    }
    
    public AnswerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ANSWER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ANSWER' TEXT," + // 1: answer
                "'VALID' INTEGER," + // 2: valid
                "'QUESTION_ID' INTEGER NOT NULL );"); // 3: questionId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ANSWER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Answer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(2, answer);
        }
 
        Integer valid = entity.getValid();
        if (valid != null) {
            stmt.bindLong(3, valid);
        }
        stmt.bindLong(4, entity.getQuestionId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Answer readEntity(Cursor cursor, int offset) {
        Answer entity = new Answer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // answer
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // valid
            cursor.getLong(offset + 3) // questionId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Answer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAnswer(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setValid(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setQuestionId(cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Answer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Answer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "answers" to-many relationship of Question. */
    public List<Answer> _queryQuestion_Answers(long questionId) {
        synchronized (this) {
            if (question_AnswersQuery == null) {
                QueryBuilder<Answer> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.QuestionId.eq(null));
                question_AnswersQuery = queryBuilder.build();
            }
        }
        Query<Answer> query = question_AnswersQuery.forCurrentThread();
        query.setParameter(0, questionId);
        return query.list();
    }

}
